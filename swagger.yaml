openapi: 3.0.0

info:
  title: bookstore_api
  description: bookstore_api_page
  version: 1.0.0

servers:
  - url: http://127.0.0.1:3000/api

paths:

  /books:
    get:
      summary: Get books
      tags:
        - Books
      parameters:
        - name: title
          in: query
          description: filter books by title
          schema:
            type: string
        - name: author
          in: query
          description: filter books by author's name
          schema:
            type: string
        - name: genre
          in: query
          description: filter books by genre
          schema:
            type: string
        - name: publication_date
          in: query
          description: by publication date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: search
          in: query
          description: search for books by title (case-insensitive, partial match)
          schema:
            type: string
        - name: limit
          in: query
          description: number of items per page
          schema:
            type: integer
        - name: offset
          in: query
          description: number of items to skip
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                  previous:
                    type: string
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid query params
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no books found by filters

    post:
      summary: Add a new book
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  msg:
                    type: string
                    example: book added successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authentication credentials were not provided.

  /books/{id}:
    get:
      summary: Get a book by id
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the book
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: book not found

    put:
      summary: Update a book by id
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the book to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: book updated successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authentication credentials were not provided.
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: book not found

    delete:
      summary: Delete a book by id
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the book to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: book deleted successfully
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: book not found

  /order/:
      post:
        tags:
          - Payment
        summary: Place order
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
              examples:
                "Buy one book":
                  value:
                    order:
                      [ { "book_id": 10, "quantity": 1 } ]
                "Buy several books":
                  value:
                    order:
                      [ { "book_id": 15, "quantity": 1 }, { "book_id": 50, "quantity": 2 } ]
        responses:
          "200":
            description: Place order for a book
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/OrderResponse"
          "400":
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: quantity must be greater than 0
          "404":
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: book not found

  /authors:
    get:
      summary: Get authors
      tags:
        - Authors
      parameters:
        - name: name
          in: query
          description: filter authors by name
          schema:
            type: string
        - name: search
          in: query
          description: search for authors by name (case-insensitive, partial match)
          schema:
            type: string
        - name: limit
          in: query
          description: number of items per page
          schema:
            type: integer
        - name: offset
          in: query
          description: number of items to skip
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                  previous:
                    type: string
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid query params
        "404":
          description: Authors not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no authors found by filters

  /authors/{id}:
    get:
      summary: Get an author by id
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the author
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: author not found

  /token/:
    get:
      summary: Get user token
      tags:
        - Token
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: need registration

components:
  schemas:

    Book:
      type: object
      properties:
        id:
          type: integer
          description: book id
          example: 1
        title:
          type: string
          description: book title
          example: out_book
        author:
          type: string
          description: book author
          example: out_author
        genre:
          type: string
          description: book genre
          example: out_genre
        price:
          type: integer
          description: book price
          example: 1000
        quantity:
          type: integer
          description: book quantity
          example: 10
        publication_date:
          type: string
          format: date
          description: book publication_date
          example: 2000-10-10

    BookInput:
      type: object
      required:
        - title
        - author
        - genre
        - price
        - quantity
      properties:
        title:
          type: string
          description: book title
          example: add_book
        author:
          type: string
          description: book author
          example: add_author
        genre:
          type: string
          description: book genre
          example: add_genre
        price:
          type: integer
          description: book price
          example: 1000
        quantity:
          type: integer
          description: book quantity
          example: 10
        publication_date:
          type: string
          format: date
          description: book publication_date
          example: 2023-01-01

    Author:
      type: object
      properties:
        id:
          type: integer
          description: author id
          example: 1
        name:
          type: string
          description: author name
          example: out_author

    Order:
      type: object
      required:
        - order
      properties:
        order:
          type: array
          items:
            type: object
            required:
              - book_id
              - quantity
            properties:
              book_id:
                type: integer
                example: 50
              quantity:
                type: integer
                example: 2

    OrderResponse:
      type: object
      properties:
        order_id:
          type: integer
          example: 50
        url:
          type: string
          example: https://pay.mbnk.biz/1234567joWLr4Da3Msdy
