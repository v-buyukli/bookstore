openapi: 3.0.0
info:
  title: bookstore_api
  description: bookstore_api_page
  version: 1.0.0
servers:
  - url: https://bookstore0-80ca638e1301.herokuapp.com/api
paths:
  /books:
    get:
      summary: Get books
      parameters:
        - name: title
          in: query
          description: filter books by title
          schema:
            type: string
        - name: author
          in: query
          description: filter books by author's name
          schema:
            type: string
        - name: genre
          in: query
          description: filter books by genre
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid query params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no books found by filters
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  msg:
                    type: string
                    example: book added successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid json
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authentication credentials were not provided.
  /books/{id}:
    get:
      summary: Get a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the book
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: book not found
    put:
      summary: Update a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the book to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: book updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid json
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Authentication credentials were not provided.
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: book not found
    delete:
      summary: Delete a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the book to delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: book not found
  /authors:
    get:
      summary: Get authors
      parameters:
        - name: name
          in: query
          description: filter books by name
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid query params
        '404':
          description: Authors not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no authors found by filters
  /authors/{id}:
    get:
      summary: Get an author by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of the author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: author not found
  /token/:
    get:
      summary: Get user token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: need registration
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          description: book id
          example: 1
        title:
          type: string
          description: book title
          example: out_book
        author:
          type: string
          description: book author
          example: out_author
        genre:
          type: string
          description: book genre
          example: out_genre
        publication_date:
          type: string
          format: date
          description: book publication_date
          example: 2000-10-10
    BookInput:
      type: object
      required:
        - title
        - author
        - genre
      properties:
        title:
          type: string
          description: book title
          example: add_book
        author:
          type: string
          description: book author
          example: add_author
        genre:
          type: string
          description: book genre
          example: add_genre
        publication_date:
          type: string
          format: date
          description: book publication_date
          example: 2023-01-01
    Author:
      type: object
      properties:
        id:
          type: integer
          description: author id
          example: 1
        name:
          type: string
          description: author name
          example: out_author
